There are a total of n courses you have to take, labeled from 0 to n - 1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]
Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

For example: 2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.

2, [[1,0],[0,1]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0, 
and to take course 0 you should also have finished course 1. So it is impossible.

public boolean canFinish(int numCourses, int[][] prerequisites) {
    HashMap<Integer, List<Integer>> graph = new HashMap<Integer, List<Integer>>();
    for (int[] prerequisite : prerequisites) {
        if (!graph.containsKey(prerequisite[0])) graph.put(prerequisite[0], new ArrayList<Integer>());
        graph.get(prerequisite[0]).add(prerequisite[1]);
    }

    HashMap<Integer, Integer> status = new HashMap<Integer, Integer>();
    for (int i = 0; i < numCourses; i++) {
        if (hasCircle(i, graph, status)) return false;
    }

    return true;
}

private static boolean hasCircle(Integer courseId, HashMap<Integer, List<Integer>> graph,  HashMap<Integer, Integer> status) {
    if (status.containsKey(courseId)) {
        if (status.get(courseId) == 1) return true;
        if (status.get(courseId) == 2) return false;
    }

    status.put(courseId, 1);
    if (graph.containsKey(courseId)) {
        for (Integer i : graph.get(courseId)) {
            if (hasCircle(i, graph, status)) return true; 
        }
    }      
    status.put(courseId, 2);

    return false;
}
