class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
      List<int[]> borders = new ArrayList<int[]>();
      for (int[] building : buildings) {
        borders.add(new int[] { building[0], building[2] * -1 });
        borders.add(new int[] { building[1], building[2] });
      }

      borders.sort(new PairComparator());
      PriorityQueue<Integer> heights = new PriorityQueue<Integer>(Collections.reverseOrder());
      heights.add(0);
      List<int[]> result = new ArrayList<int[]>();
      int prev = 0;
      int cur = 0;
      for (int[] pair : borders) {
        Integer height = pair[1];
        if (height < 0) heights.add(height * -1);
        else heights.remove(height);

        cur = heights.peek();
        if (cur != prev) {
          result.add(new int[] { pair[0], cur });
          prev = cur;
        }
      }

      return result;
    }
}

class PairComparator implements Comparator<int[]> {
  @Override
  public int compare(int[] pair1, int[] pair2) {
    if (pair1[0] != pair2[0]) return pair1[0] - pair2[0];
    else return pair1[1] - pair2[1];
  }
}
