Design a data structure that supports the following two operations:
void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

Example:
addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true

Note: You may assume that all words are consist of lowercase letters a-z.

class WordDictionary {
    private Trie root;
    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new Trie();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        if (word == null || word.length() == 0) return;
        
        Trie node = root;
        for (int i = 0; i < word.length(); i++) {
            int idx = word.charAt(i) - 'a';
            if (node.children[idx] == null) node.children[idx] = new Trie();
            node = node.children[idx];
        }
        node.isWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        if (word == null || word.length() == 0) return true;
        return searchAll(word, 0, root);
    }
    
    private boolean searchAll(String word, int start, Trie node) {        
        for (int i = start; i < word.length(); i++) {
            if (word.charAt(i) == '.') {
                for (Trie child : node.children) {
                    if (child != null && searchAll(word, i + 1, child)) return true;
                }
                return false;
            } else {
                int idx = word.charAt(i) - 'a';
                node = node.children[idx];
                if (node == null) return false;
            }
        }
        return node.isWord;
    }
}

class Trie {
    public Trie[] children;
    public boolean isWord;
    public Trie() {
        children = new Trie[26];
        isWord = false;
    }
}
/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
 
