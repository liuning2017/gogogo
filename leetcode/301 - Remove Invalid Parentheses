Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.
Note: The input string may contain letters other than the parentheses ( and ).
Example 1: Input: "()())()", Output: ["()()()", "(())()"]
Example 2: Input: "(a)())()", Output: ["(a)()()", "(a())()"]
Example 3: Input: ")(", Output: [""]

public List<String> removeInvalidParentheses(String s) {
    List<String> res = new ArrayList<String>();
    if (s == null) return res;
    remove(s, 0, 0, new char[]{'(', ')'}, res);
    return res;
}

private static void remove(String s, int lastI, int lastJ, char[] pair, List<String> res) {
    int cnt = 0;
    for (int i = lastI; i < s.length(); i++) {
        if (s.charAt(i) == pair[0]) cnt++;
        else if (s.charAt(i) == pair[1]) cnt--;

        if (cnt >= 0) continue;
        for (int j = lastJ; j <= i; j++) {
            if (s.charAt(j) == pair[1] && (j == lastJ || s.charAt(j - 1) != pair[1])) {
                remove(s.substring(0, j) + s.substring(j + 1), i, j, pair, res);
            }
        }            
        return;
    }

    String reversedS = new StringBuilder(s).reverse().toString();
    if (pair[0] == '(') {
        remove(reversedS, 0, 0, new char[]{')', '('}, res);
    } else {
        res.add(reversedS);
    }
}
