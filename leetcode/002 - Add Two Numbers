/**
         * You are given two non-empty linked lists representing two non-negative integers. 
         * The digits are stored in reverse order and each of their nodes contain a single digit. 
         * Add the two numbers and return it as a linked list.
        You may assume the two numbers do not contain any leading zero, except the number 0 itself.
        Example
        Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
        Output: 7 -> 0 -> 8
        Explanation: 342 + 465 = 807.
         **/
        public static ListNode AddTwoNumbers(ListNode l1, ListNode l2)
        {
            ListNode node = new ListNode(0);
            var head = node;
            int carry = 0;
            while (l1 != null && l2 != null)
            {
                int sum = l1.Value + l2.Value + carry;
                node.Next = new ListNode(sum % 10);
                carry = sum / 10;
                l1 = l1.Next;
                l2 = l2.Next;
                node = node.Next;
            }

            var l = l1 != null ? l1 : l2;
            while (l != null)
            {
                int sum = l.Value + carry;
                node.Next = new ListNode(sum % 10);
                carry = sum / 10;
                l = l.Next;
                node = node.Next;
            }

            if (carry != 0) node.Next = new ListNode(carry);

            return head.Next;
        }
        
        
