Given a non-empty string s and an abbreviation abbr, return whether the string matches with the given abbreviation.

A string such as "word" contains only the following valid abbreviations:
["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]
Notice that only the above abbreviations are valid abbreviations of the string "word". Any other string is not a valid abbreviation of "word".

Note: Assume s contains only lowercase letters and abbr contains only lowercase letters and digits.

Example 1:
Given s = "internationalization", abbr = "i12iz4n":
Return true.

Example 2:
Given s = "apple", abbr = "a2e":
Return false.

public boolean validWordAbbreviation(String word, String abbr) {
        if (word == null && abbr == null) return true;
        if (word == null || abbr == null) return false;
        
        int len1 = word.length();
        int len2 = abbr.length();
        int i = 0;
        int j = 0;
        while (i < len1 && j < len2) {
            if (word.charAt(i) == abbr.charAt(j)){
                i++;
                j++;
                continue;
            }
            
            if (abbr.charAt(j) <= '0' || abbr.charAt(j) > '9') return false;

            //or, we hit a number 
            int v = 0;
            while (abbr.charAt(j) >= '0' && abbr.charAt(j) <= '9') {
                v = 10 * v + (abbr.charAt(j) - '0');
                j++; 
                if (j == len2) break;
            }
            
            i += v;        
        }
        
        return i == len1 && j == len2;
    }
    
Pei's solution:
class Solution {
    /* Test Case
    1. abc  abc/ab/abcd/
    2. abc  1bc/0bc/a1c/ab1/ab3/5bc
    3. internationalization, i12iz4n
    4. apple a2e
    5. a 01/1
    */
    public boolean validWordAbbreviation(String word, String abbr) {
        char[] w = word.toCharArray();
        char[] a = abbr.toCharArray();
        int len1 = word.length();
        int len2 = abbr.length();
        int i = 0;
        int j = 0;
        while(i < len1 && j < len2){
            if( w[i] == a[j] ){
                i++;
                j++;
                continue;
            }
            if(a[j] <='0' || a[j] >'9') return false;

            //or, we hit a number 
            int v = 0;
            while(a[j] >= '0' && a[j] <= '9') {
                v = 10*v+(a[j]-'0');
                j++; 
                if(j == len2) break;
            }
            i += v;        
        }
        if(i == len1 && j == len2) return true;
        return false;
    }
}
