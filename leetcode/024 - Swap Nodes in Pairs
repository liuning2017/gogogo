Given a linked list, swap every two adjacent nodes and return its head.
For example, Given 1->2->3->4, you should return the list as 2->1->4->3.
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

public ListNode swapPairs(ListNode head) {
    if (head == null || head.next == null) return head;

    ListNode newHead = head.next;
    ListNode prev = null;
    ListNode t1 = head;
    while (t1 != null) {
        ListNode temp = null;
        if (t1.next != null) temp = t1.next.next;
        prev = swapPair(prev, t1);
        t1 = temp;
    }

    return newHead;
}

private ListNode swapPair(ListNode prev, ListNode t1) {
    if (t1 == null) return prev;

    if (t1.next == null) {
        if (prev != null) prev.next = t1;
    } else {
        ListNode t2 = t1.next;
        t1.next = null;
        t2.next = t1;
        if (prev != null) prev.next = t2;
    }

    return t1;
}
