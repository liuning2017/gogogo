Implement a basic calculator to evaluate a simple expression string.
The expression string contains only non-negative integers, +, -, *, / operators and empty spaces . 
The integer division should truncate toward zero. You may assume that the given expression is always valid.
Some examples:
"3+2*2" = 7
" 3/2 " = 1
" 3+5 / 2 " = 5

public int calculate(String s) {
    Stack<Integer> stack = new Stack<Integer>();
    List<Character> ops = new ArrayList<Character>();
    int lastOp = 0;
    int num = 0;
    s = s + ' ';
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        if (c >= '0' && c <='9') {
            num = num * 10 + (c - '0');
        } else {
            if (c == ' ' && i < s.length() - 1) continue; 
            if (lastOp > 0) {
                int num1 = stack.pop();
                num = (lastOp == 1) ? num1 * num : num1 / num;
                lastOp = 0;
            }

            stack.push(num);
            num = 0;
            if (c == '+' || c == '-') {
                ops.add(c);
            } else if (c == '*') {
               lastOp  = 1;
            } else if (c == '/') {
               lastOp = 2;
            }
        } 
    }

    if (ops.size() == 0) return stack.pop();

    Stack<Integer> nums = new Stack<Integer>();
    while (!stack.empty()) nums.push(stack.pop());
    num = nums.pop();
    for(char c : ops) {
        int num1 = nums.pop();
        num = (c == '+') ? num + num1 : num - num1;
    }

    return num;
}


public int calculate(String s) {
    if (s == null || s.length() == 0) return 0;

    s = s + "#";
    Queue<Integer> q1 = new LinkedList<Integer>();
    Queue<Character> q2 = new LinkedList<Character>();
    int op1 = 0;
    int op2 = 0;
    char operator = '#';
    int i = 0;
    while (i < s.length()) {
        char c = s.charAt(i++);
        if (c == ' ') continue;

        if (c == '+' || c == '-' || c == '#') {
            if (operator != '#') {
                if (operator == '*') op1 = op1 * op2;
                else op1 = op1 / op2;
                operator = '#';
                op2 = 0;
            }

            q1.add(op1);
            op1 = 0;
            q2.add(c);
        } else if (c == '*' || c == '/') {
            if (operator != '#') {
                if (operator == '*') op1 = op1 * op2;
                else op1 = op1 / op2;
                op2 = 0;
            }
            operator = c;
        } else {
            if (operator != '#') op2 = op2 * 10 + c - '0';
            else op1 = op1 * 10 + c - '0';
        }
    }

    op1 = q1.remove();
    while (q1.size() > 0) {
        op2 = q1.remove();
        operator = q2.remove();

        if (operator == '+') op1 = op1 + op2;
        else op1 = op1 - op2;
    }

    return op1;
}
