Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example:
Input: [1,2,3,null,5,null,4], Output: [1, 3, 4]
Explanation:
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
  
public List<Integer> rightSideView(TreeNode root) {
    List<Integer> res = new ArrayList<Integer>();
    if (root == null) return res;

    Queue<TreeNode> current = new LinkedList<TreeNode>();
    current.add(root);
    while (current.size() > 0) {
        TreeNode node = null;
        Queue<TreeNode> next = new LinkedList<TreeNode>();
        while (current.size() > 0) {
             node = current.remove();
             if (node.left != null) next.add(node.left);
             if (node.right != null) next.add(node.right);
        }

        res.add(node.val);
        current = next;
    }

    return res;
}
