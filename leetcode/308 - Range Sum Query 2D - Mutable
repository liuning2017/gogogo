Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) 
and lower right corner (row2, col2).
Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]
sumRegion(2, 1, 4, 3) -> 8
update(3, 2, 2)
sumRegion(2, 1, 4, 3) -> 10
Note:
The matrix is only modifiable by the update function.
You may assume the number of calls to update and sumRegion function is distributed evenly.
You may assume that row1 ≤ row2 and col1 ≤ col2.

class NumMatrix {
    private int[][] mat;
    private int[][] colSum;
    
    public NumMatrix(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) return;
        
        this.mat = matrix;
        this.colSum = new int[matrix.length + 1][matrix[0].length];
        for (int i = 1; i < this.colSum.length; i++)
            for (int j = 0; j < this.colSum[0].length; j++)
                this.colSum[i][j] = this.colSum[i - 1][j] + this.mat[i - 1][j];
    }
    
    public void update(int row, int col, int val) {
        for (int i = row + 1; i < this.colSum.length; i++) {
            this.colSum[i][col] += val - this.mat[row][col];
        }
        
        this.mat[row][col] = val;
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int res = 0;
        for (int j = col1; j <= col2; j++) {
            res += this.colSum[row2 + 1][j] - this.colSum[row1][j];
        }
        
        return res;
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * obj.update(row,col,val);
 * int param_2 = obj.sumRegion(row1,col1,row2,col2);
 */
