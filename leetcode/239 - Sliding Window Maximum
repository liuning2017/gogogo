Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example, Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].
Note: You may assume k is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.

public int[] maxSlidingWindow(int[] nums, int k) {
    if (nums == null || nums.length == 0) return new int[0];

    int n = nums.length;
    int[] res = new int[n - k + 1];

    Deque<Integer> deq = new ArrayDeque<Integer>();
    for (int i = 0; i < n; i++) {
        if (deq.size() > 0 && deq.peek() <= i - k) deq.poll();
        while (deq.size() > 0 && nums[deq.peekLast()] < nums[i]) deq.pollLast();
        deq.add(i);

        if (i >= k - 1) res[i - k + 1] = nums[deq.peek()];
    }

    return res;
}
