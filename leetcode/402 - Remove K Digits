Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.
Note: The length of num is less than 10002 and will be â‰¥ k. The given num does not contain any leading zero.

Example 1:
Input: num = "1432219", k = 3
Output: "1219"

Example 2:
Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:
Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.

public String removeKdigits(String num, int k) {
    if (num == null) return "0";

    StringBuilder sb = new StringBuilder();
    boolean flag = false;
    while (num.length() > k) {
        if (k == 0) {
            sb.append(num);
            break;
        }

        int j = 0;
        char c = '9';
        for (int i = 0; i <= k; i++) {
            if (num.charAt(i) < c) {
                c = num.charAt(i);
                j = i;
            } 
        }

        if (c != '0') flag = true;
        if (c != '0' || flag) sb.append(c);

        num = num.substring(j + 1);
        k -= j;
    }

    return sb.length() == 0 ? "0" : sb.toString();
}
    
public String removeKdigits(String num, int k) {
    if (num == null || num.length() <= k) return "0";

    StringBuilder sb = new StringBuilder();
    removeDigit(num, k, sb, false);
    return sb.length() == 0 ? "0" : sb.toString();
}

private static void removeDigit(String num, int k, StringBuilder sb, boolean flag) {
    if (k == 0) {
        sb.append(num);
        return;
    }
    if (num.length() == k) return;

    int j = 0;
    char c = '9';
    for (int i = 0; i <= k; i++) {
        if (num.charAt(i) < c) {
            c = num.charAt(i);
            j = i;
        } 
    }

    if (c != '0') flag = true;
    if (c != '0' || flag) sb.append(c);

    removeDigit(num.substring(j + 1), k - j, sb, flag);
}
