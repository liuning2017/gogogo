Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. 
All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:
If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. 
For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
All airports are represented by three capital letters (IATA code).
You may assume all tickets form at least one valid itinerary.

Example 1:
Input: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Output: ["JFK", "MUC", "LHR", "SFO", "SJC"]

Example 2:
Input: [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Output: ["JFK","ATL","JFK","SFO","ATL","SFO"]
Explanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"]. But it is larger in lexical order.

public List<String> findItinerary(String[][] tickets) {   
    List<String> res = new ArrayList<String>();
    if (tickets == null || tickets.length == 0) return res;

    HashMap<String, PriorityQueue<String>> map = new HashMap<String,PriorityQueue<String>>();
    for (String[] ticket : tickets) {
        if (!map.containsKey(ticket[0])) map.put(ticket[0], new PriorityQueue<String>());
        map.get(ticket[0]).add(ticket[1]);
    }

    Stack<String> stack = new Stack<String>();
    stack.push("JFK");
    while (!stack.empty())  {
        String from = stack.peek();
        while (map.containsKey(from)) {
            PriorityQueue<String> cities = map.get(from);
            stack.push(cities.poll());
            if (cities.size() == 0) map.remove(from);
            from = stack.peek();
        }

        res.add(0, stack.pop());
    }

    return res;
}
