/**
         * Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

        Example:
        Input: The root of a Binary Search Tree like this:
                      5
                    /   \
                   2     13

        Output: The root of a Greater Tree like this:
                     18
                    /   \
                  20     13
         **/
        public static TreeNode BST2GreaterTree(TreeNode root)
        {
            List<TreeNode> nodes = new List<TreeNode>();
            InOrderTraverse(root, nodes);

            int sum = 0;
            for (int i = nodes.Count - 1; i >= 0; i--)
            {
                sum += nodes[i].Value;
                nodes[i].Value = sum;
            }

            return root;
        }
        private static void InOrderTraverse(TreeNode node, List<TreeNode> nodes)
        {
            if (node == null) return;
            InOrderTraverse(node.Left, nodes);
            nodes.Add(node);
            InOrderTraverse(node.Right, nodes);
        }
        
        [TestMethod]
        public void BST2GreaterTree()
        {
            var root = new TreeNode(5);
            root.Left = new TreeNode(2);
            root.Right = new TreeNode(13);

            var result = TreeAndGraph.BST2GreaterTree(root);
            Assert.AreEqual(18, result.Value);
            Assert.AreEqual(20, result.Left.Value);
            Assert.AreEqual(13, result.Right.Value);
        }
        
