Given a string S and a string T, count the number of distinct subsequences of S which equals T.
A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters 
without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).
Here is an example: S = "rabbbit", T = "rabbit". Return 3.

public int numDistinct(String s, String t) {
    if (s == null || s.length() == 0) return 0;
    int m = t.length();
    int n = s.length();
    int[][] dp = new int[m + 1][n + 1];
    for (int i = 0; i <= n; i++) dp[0][i] = 1;

    for (int i = 1; i <= m; i++)
        for (int j = 1; j <= n; j++) {
            dp[i][j] = dp[i][j - 1];
            if (t.charAt(i - 1) == s.charAt(j - 1)) dp[i][j] += dp[i - 1][j - 1];
        }

    return dp[m][n];
}
