Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, 
add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:
The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.

Example 1:
Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]

Example 2:
Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]

Example 3:
Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]

public List<String> wordBreak(String s, List<String> wordDict) {
    HashSet<String> dict = new HashSet<String>(wordDict);
    List<String> res = new ArrayList<String>();

    if (!breakable(s, dict)) return res;

    BuildSentence(s, 0, "", dict, res);
    return res;
}

private static boolean breakable(String s, HashSet<String> dict) {
    int n = s.length();
    boolean[] dp = new boolean[n + 1];
    dp[0] = true;
    for (int i = 1; i <= n; i++)
        for (int j = i - 1; j >= 0; j--) {
            if (dp[j] && dict.contains(s.substring(j, i))) dp[i] = true;
        }

    return dp[n];
}

private static void BuildSentence(String s, int start, String sentence, HashSet<String> dict, List<String> res) {
    if (start == s.length()) {
        res.add(sentence.trim());
        return;
    }

    for (int i = start + 1; i <= s.length(); i++) {
        String word = s.substring(start, i);
        if (dict.contains(word))  {
            BuildSentence(s, i, sentence + word + " ", dict, res);
        }
    }
}
