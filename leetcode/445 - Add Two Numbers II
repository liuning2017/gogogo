You are given two non-empty linked lists representing two non-negative integers. 
The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Follow up: What if you cannot modify the input lists? In other words, reversing the lists is not allowed.
Example:
Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4), Output: 7 -> 8 -> 0 -> 7

public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    Stack<Integer> s1 = new Stack<Integer>();
    Stack<Integer> s2 = new Stack<Integer>();
    PushToStack(l1, s1);
    PushToStack(l2, s2);

    ListNode t = null;
    int carry = 0;
    while (true) {
        int sum = carry;
        boolean stop = true;
        if (!s1.empty()) {
            sum += s1.pop();
            stop = false;
        }
        if (!s2.empty()) {
            sum += s2.pop();
            stop = false;
        }

        if (sum > 0 || !stop) {
            carry = sum / 10;
            ListNode t1 = new ListNode(sum % 10);
            t1.next = t;
            t = t1;
        }

        if (stop) break;
    }

    return t;
}

private void PushToStack(ListNode t, Stack<Integer> stack) {
    while (t != null) {
        stack.push(t.val);
        t = t.next;
    }
}
