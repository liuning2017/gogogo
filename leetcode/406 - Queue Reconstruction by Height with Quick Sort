/**
         * Suppose you have a random list of people standing in a queue. 
         * Each person is described by a pair of integers (h, k), 
         * where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. 
         * Write an algorithm to reconstruct the queue.
        Note: The number of people is less than 1,100.

        Example
        Input: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
        Output: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
         **/
        public static Tuple<int, int>[] ReconstructQueue(Tuple<int, int>[] people)
        {
            QuickSort(people);
            List<Tuple<int, int>> res = new List<Tuple<int, int>>();
            foreach(var p in people)
            {
                res.Insert(p.Item2, p);
            }
            return res.ToArray();
        }
        private static void QuickSort(Tuple<int, int>[] people)
        {
            QuickSortPartition(people, 0, people.Length - 1);
        }
        private static void QuickSortPartition(Tuple<int, int>[] people, int start, int end)
        {
            if (start >= end) return;

            var p = people[start];
            int i = start + 1;
            int j = end;
            while (i < j)
            {
                while (j > start && (people[j].Item1 < p.Item1 || people[j].Item1 == p.Item1 && people[j].Item2 > p.Item2))
                {
                    j--;
                }
                if (j <= i) break;
                while (i < j && (people[i].Item1 > p.Item1 || people[i].Item1 == p.Item1 && people[i].Item2 < p.Item2))
                {
                    i++;
                }

                if (i < j) SwapPeople(people, i, j);
            }
            if (start < j) SwapPeople(people, start, j);

            QuickSortPartition(people, start, j - 1);
            QuickSortPartition(people, j + 1, end);
        }
        private static void SwapPeople(Tuple<int, int>[] people, int i, int j)
        {
            var t = people[i];
            people[i] = people[j];
            people[j] = t;
        }
        
        [TestMethod]
        public void ReconstructQueue()
        {
            Tuple<int, int>[] people = new Tuple<int, int>[6];
            people[0] = new Tuple<int, int>(7, 0);
            people[1] = new Tuple<int, int>(4, 4);
            people[2] = new Tuple<int, int>(7, 1);
            people[3] = new Tuple<int, int>(5, 0);
            people[4] = new Tuple<int, int>(6, 1);
            people[5] = new Tuple<int, int>(5, 2);

            var result = ArrayAndString599.ReconstructQueue(people);
            Assert.AreEqual(6, result[3].Item1);
        }
        
