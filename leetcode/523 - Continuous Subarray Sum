Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.

Example 1: 
Input: [23, 2, 4, 6, 7],  k=6
Output: True

Example 2:
Input: [23, 2, 6, 4, 7],  k=6
Output: True

Note:
The length of the array won't exceed 10,000.
You may assume the sum of all the numbers is in the range of a signed 32-bit integer.

public boolean checkSubarraySum(int[] nums, int k) {
    int len = nums.length;
    if (len < 2) return false;

    k = Math.abs(k);
    HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
    map.put(0, -1);
    int sum = 0;
    for (int i = 0; i < len; i++) {
        sum += nums[i];
        if (k != 0) sum %= k;

        if (map.containsKey(sum)) {
            if (i - map.get(sum) >= 2) return true;    
        } else {
            map.put(sum, i);
        }
    }

    return false;
}
