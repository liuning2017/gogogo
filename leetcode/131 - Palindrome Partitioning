Given a string s, partition s such that every substring of the partition is a palindrome.
Return all possible palindrome partitioning of s.
For example, given s = "aab", Return
[
  ["aa","b"],
  ["a","a","b"]
]

public List<List<String>> partition(String s) {
    List<List<String>> res = new ArrayList<List<String>>();
    if (s == null || s.length() == 0) return res;
    findPalins(s, 0, new ArrayList<String>(), res);
    return res;
}

private void findPalins(String s, int start, List<String> partition, List<List<String>> res) {
    if (start == s.length()) {
        res.add(partition);
        return;
    }

    for (int i = start; i < s.length(); i++) {
        if (isPalin(s, start, i)) {
            List<String> newPartition = new ArrayList<String>(partition);
            newPartition.add(s.substring(start, i + 1));
            findPalins(s, i + 1, newPartition, res);
        }
    }
}

private static boolean isPalin(String s, int i, int j) {
    while (i < j) {
        if (s.charAt(i++) != s.charAt(j--)) return false;
    }
    return true;
}
