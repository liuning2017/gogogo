/**
         * You are given a binary tree in which each node contains an integer value.
        Find the number of paths that sum to a given value.
        The path does not need to start or end at the root or a leaf, 
        but it must go downwards (traveling only from parent nodes to child nodes).
        The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

        Example:
        root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8
              10
             /  \
            5   -3
           / \    \
          3   2   11
         / \   \
        3  -2   1
        Return 3. The paths that sum to 8 are:
        1.  5 -> 3
        2.  5 -> 2 -> 1
        3. -3 -> 11
         **/
        public static int PathSum3(TreeNode root, int sum)
        {
            Dictionary<int, int> map = new Dictionary<int, int>();
            map.Add(0, 1);
            int cnt = 0;
            DoPathSum3(root, map, sum, 0, ref cnt);
            return cnt;
        }
        private static void DoPathSum3(TreeNode node, Dictionary<int, int> map, int sum, int currentSum, ref int cnt)
        {
            if (node == null) return;
            currentSum += node.Value;
            if (map.ContainsKey(currentSum - sum)) cnt += map[currentSum - sum];
            if (!map.ContainsKey(currentSum)) map.Add(currentSum, 0);
            map[currentSum]++;

            DoPathSum3(node.Left, map, sum, currentSum, ref cnt);
            DoPathSum3(node.Right, map, sum, currentSum, ref cnt);

            map[currentSum]--;
        }
        
        [TestMethod]
        public void PathSum3()
        {
            var root = new TreeNode(10);
            root.Left = new TreeNode(5);
            root.Left.Left = new TreeNode(3);
            root.Left.Left.Left = new TreeNode(3);
            root.Left.Left.Right = new TreeNode(-10);
            root.Left.Right = new TreeNode(2);
            root.Left.Right.Right = new TreeNode(1);
            root.Right = new TreeNode(-3);
            root.Right.Right = new TreeNode(11);

            Assert.AreEqual(4, TreeAndGraph.PathSum3(root, 8));
        }
        
