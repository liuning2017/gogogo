You are given a binary tree in which each node contains an integer value. Find the number of paths that sum to a given value.
The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).
The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:
root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8
      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1
Return 3. The paths that sum to 8 are:
1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

public int pathSum(TreeNode root, int target) {
    HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
    hm.put(0, 1);
    int[] count = new int[1];
    countPaths(root, target, 0, hm, count);
    return count[0];
}

private static void countPaths(TreeNode node, int target, int sum, HashMap<Integer, Integer> hm, int[] count) {
    if (node == null) return;
    sum += node.val;
    int diff = sum - target;
    if (hm.containsKey(diff)) count[0] += hm.get(diff);

    hm.put(sum, hm.getOrDefault(sum, 0) + 1);
    countPaths(node.left, target, sum, hm, count);
    countPaths(node.right, target, sum, hm, count);
    hm.put(sum, hm.get(sum) - 1);
}
