Find the contiguous subarray within an array (containing at least one number) which has the largest product.
For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6

public int maxProduct(int[] nums) {
    int res = Integer.MIN_VALUE;
    int start = 0;
    int i = 0; 
    while (i < nums.length) {
        if (nums[i] == 0) {
            int product = maxProduct(nums, start, i - 1);
            res = Math.max(0, Math.max(res, product));
            while (i < nums.length && nums[i] == 0) i++;
            start = i;
        } else if (i == nums.length - 1) {
            int product = maxProduct(nums, start, i);
            res = Math.max(res, product);
            break;
        } else {
            i++;
        }
    }

    return res;
}

private int maxProduct(int[] nums, int start, int end) {
    if (start > end) return 0;

    int res = 1;
    for (int i = start; i <= end; i++) {
        res *= nums[i];
    }
    if (res > 0 || start == end) return res;

    int left = 1;
    for (int i = start; i <= end; i++) {
        left *= nums[i];
        if (nums[i] < 0) break;
    }

    int right = 1;
    for (int i = end; i >= start; i--) {
        right *= nums[i];
        if (nums[i] < 0) break;
    }

    return res / Math.max(left, right);
}
