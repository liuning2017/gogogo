Here is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. 
You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. 
Derive the order of letters in this language.

Example 1: Given the following words in dictionary,
[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]
The correct order is: "wertf".

Example 2: Given the following words in dictionary,
[
  "z",
  "x"
]
The correct order is: "zx".

public String alienOrder(String[] words) {
    boolean[][] g = new boolean[26][26];
    for (String word : words) {
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            g[c - 'a'][c - 'a'] = true;
        }
    }
    for (int i = 0; i < words.length - 1; ++i) {
        int mn = Math.min(words[i].length(), words[i + 1].length());
        int j = 0;
        while (j < mn) {
            if (words[i].charAt(j) != words[i + 1].charAt(j)) {
                g[words[i].charAt(j) - 'a'][words[i + 1].charAt(j) - 'a'] = true;
                break;
            }
            j++;
        }
        if (j == mn && words[i].length() > words[i + 1].length()) return "";
    }

    boolean[] path = new boolean[26];
    StringBuilder res = new StringBuilder();
    for (int i = 0; i < 26; ++i) {
        if (!dfs(g, i, path, res)) return "";
    }
    for (int i = 0; i < 26; ++i) {
        if (g[i][i]) res.append((char)('a' + i));
    }
    return res.reverse().toString();
}

private boolean dfs(boolean[][] g, int idx, boolean[] path, StringBuilder res) {
    if (!g[idx][idx]) return true;
    path[idx] = true;
    for (int i = 0; i < 26; ++i) {
        if (i == idx || !g[idx][i]) continue;
        if (path[i]) return false;
        if (!dfs(g, i, path, res)) return false;
    }
    path[idx] = false;
    g[idx][idx] = false;
    res.append((char)('a' + idx));
    return true;
}
