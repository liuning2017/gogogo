Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
For example, Given [5, 7, 7, 8, 8, 10] and target value 8, return [3, 4].

public int[] searchRange(int[] nums, int target) {
    int[] res = new int[] { -1, -1 };
    if (nums == null || nums.length == 0) return res;

    res[0] = findBoundary(nums, target, true);
    if (res[0] == -1) return res;
    res[1] = findBoundary(nums, target, false);
    return res;
}

private int findBoundary(int[] nums, int target, boolean left) {
    int i = 0, j = nums.length - 1;
    while (i <= j) {
        int mid = (i + j) / 2;
        if (target < nums[mid]) {
            j = mid - 1;
        } else if (target > nums[mid]) {
            i = mid + 1;
        } else {
            if (left) {
                if (mid == 0 || nums[mid - 1] < target) return mid;
                else j = mid - 1;
            } else {
                if (mid == nums.length - 1 || nums[mid + 1] > target) return mid;
                else i = mid + 1;
            }
        }
    }

    return -1;
}
