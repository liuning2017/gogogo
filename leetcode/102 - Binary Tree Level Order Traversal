/**
         * Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

        For example: Given binary tree [3,9,20,null,null,15,7],
            3
           / \
          9  20
            /  \
           15   7
        return its level order traversal as:
        [
          [3],
          [9,20],
          [15,7]
        ]
         **/
        public IList<IList<int>> LevelOrder(TreeNode root)
        {
            IList<IList<int>> result = new List<IList<int>>();
            if (root == null) return result;

            Queue<TreeNode> q = new Queue<TreeNode>();
            q.Enqueue(root);
            q.Enqueue(null);
            List<int> row = new List<int>();
            bool moreComing = false;
            while (q.Count > 0)
            {
                var node = q.Dequeue();
                if (node != null)
                {
                    row.Add(node.Value);
                    if (node.Left != null)
                    {
                        q.Enqueue(node.Left);
                        moreComing = true;
                    }
                    if (node.Right != null)
                    {
                        q.Enqueue(node.Right);
                        moreComing = true;
                    }
                }
                else
                {
                    result.Add(row);
                    row = new List<int>();
                    if (moreComing) q.Enqueue(null);
                    moreComing = false;
                }
            }

            return result;
        }
        
