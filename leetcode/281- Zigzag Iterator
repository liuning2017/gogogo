Given two 1d vectors, implement an iterator to return their elements alternately.
Example:
Input:
v1 = [1,2]
v2 = [3,4,5,6] 
Output: [1,3,2,4,5,6]
Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question:
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". 
For example:
Input:
[1,2,3]
[4,5,6,7]
[8,9]
Output: [1,4,8,2,5,9,3,6,7].

public class ZigzagIterator {
    private List<List<Integer>> vec2d;
    private int i = -1;
    private int j = -1;
    List<Integer> current = null;
    
    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        vec2d = new ArrayList<List<Integer>>();
        vec2d.add(v1);
        vec2d.add(v2);
        setNext();
    }

    public ZigzagIterator(List<List<Integer>> vec2d) {
        this.vec2d = vec2d;
        if (vec2d != null && vec2d.size() > 0) setNext();
    }
    
     public boolean hasNext() {
        return current != null && j < current.size();
    }
    
    public int next() {
        int val = current.get(j);
        setNext();
        return val;
    }
    
    private void setNext() {
        int m = vec2d.size();
        i = (i + 1) % m;
        if (i == 0) j++;

        int cnt = 0;
        while (j >= vec2d.get(i).size() && cnt++ < m) {
            i = (i + 1) % m;
            if (i == 0) j++;
        }
        
        current = vec2d.get(i);
    }
}

/**
 * Your ZigzagIterator object will be instantiated and called as such:
 * ZigzagIterator i = new ZigzagIterator(v1, v2);
 * while (i.hasNext()) v[f()] = i.next();
 */
 
