Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Determine if you are able to reach the last index.
For example:
A = [2,3,1,1,4], return true.
A = [3,2,1,0,4], return false.

public boolean canJump(int[] nums) {
    if (nums == null || nums.length == 0) return true;
    int n = nums.length;

    int reach = 0;
    for (int i = 0; i < n; i++) {
        if (i > reach) return false;
        reach = Math.max(reach, i + nums[i]);
        if (reach >= n - 1) return true;
    }

    return true;
}
    
public boolean canJump(int[] nums) {
    if (nums == null || nums.length == 0) return true;
    int n = nums.length;
    boolean[] can = new boolean[n];
    can[0] = true;
    for (int i = 0; i < n; i++) {
        if (can[i]) {
            for (int j = nums[i]; j >= 1; j--) {
                int k = i + j;
                if (k >= n - 1) return true;
                can[k] = true;
            }
        }
    }

    return can[n - 1];
}
