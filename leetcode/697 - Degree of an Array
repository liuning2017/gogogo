Given a non-empty array of non-negative integers nums, 
the degree of this array is defined as the maximum frequency of any one of its elements.
Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.
Example 1: Input: [1, 2, 2, 3, 1], Output: 2
Example 2: Input: [1,2,2,3,1,4,2]ï¼Œ Output: 6
Note: nums.length will be between 1 and 50,000. nums[i] will be an integer between 0 and 49,999.

public int findShortestSubArray(int[] nums) {
    if (nums == null || nums.length == 0) return 0;

    HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
    HashMap<Integer, Integer> startIndex = new HashMap<Integer, Integer>();
    int maxDegree = 0;
    int res = 0;
    for (int i = 0; i < nums.length; i++) {
        int num = nums[i];
        if (!startIndex.containsKey(num)) startIndex.put(num, i);

        if (!hm.containsKey(num)) hm.put(num, 0);
        int degree = hm.get(num) + 1;
        hm.put(num, degree);

        if (degree == maxDegree) {
            res = Math.min(res, i - startIndex.get(num) + 1);
        } else if (degree > maxDegree){
            maxDegree = degree;
            res = i - startIndex.get(num) + 1;
        }
    }

    return res;
}
