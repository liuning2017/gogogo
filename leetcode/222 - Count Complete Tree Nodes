Given a complete binary tree, count the number of nodes.
Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. 
It can have between 1 and 2h nodes inclusive at the last level h.

public int countNodes(TreeNode root) {
    if (root == null) return 0;
    int height = getHeight(root);
    int[] leavesNo = new int[1];
    findLeaves(root, height, 0, leavesNo);
    return (int)Math.pow(2, height - 1) - 1 + leavesNo[0];
}

private static int getHeight(TreeNode root) {
    TreeNode node = root;
    int height = 0;
    while (node != null) {
        height++;
        node = node.left;
    }
    return height;
}

private static boolean findLeaves(TreeNode node, int height, int k, int[] leavesNo) {
    k++;
    if (k == height) {
        leavesNo[0]++;
        return true;
    } else if (k == height - 1) {
        if (node.left == null) {
            return false;
        } else {
            leavesNo[0]++;
        }

        if (node.right == null) {
            return false;
        } else {
            leavesNo[0]++;
            return true;
        }
    }

    if (findLeaves(node.left, height, k, leavesNo)) return findLeaves(node.right, height, k, leavesNo);
    return false;
}
