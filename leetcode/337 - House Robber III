The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." 
Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". 
It will automatically contact the police if two directly-linked houses were broken into on the same night.
Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:
     3
    / \
   2   3
    \   \ 
     3   1
Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:
     3
    / \
   4   5
  / \   \ 
 1   3   1
Maximum amount of money the thief can rob = 4 + 5 = 9.

public int rob(TreeNode root) {
    HashMap<TreeNode, Integer> map = new HashMap<TreeNode, Integer>();
    return getMaxMoney(root, map);
}

private static int getMaxMoney(TreeNode node, HashMap<TreeNode, Integer> map) {
    if (node == null) return 0;
    if (map.containsKey(node)) return map.get(node);

    int money1 = node.val;
    int money2 = 0;   
    if (node.left != null) {
        money2 += getMaxMoney(node.left, map);
        money1 += getMaxMoney(node.left.left, map) + getMaxMoney(node.left.right, map);
    }
    if (node.right != null) {
        money2 += getMaxMoney(node.right, map);
        money1 += getMaxMoney(node.right.left, map) + getMaxMoney(node.right.right, map);
    }
    int maxMoney = Math.max(money1, money2);

    map.put(node, maxMoney);
    return maxMoney;
}
