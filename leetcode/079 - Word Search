Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, 
where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
For example, Given board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

public boolean exist(char[][] board, String word) {
    int[][] directions = new int[4][];
    directions[0] = new int[] { -1, 0 };
    directions[1] = new int[] { 0, 1 };
    directions[2] = new int[] { 1, 0 };
    directions[3] = new int[] { 0, -1 };

    for (int i = 0; i < board.length; i++)
       for (int j = 0; j < board[0].length; j++) {
           if (exist(directions, board, i, j, word, 0)) return true;
       } 

    return false;
}

private static boolean exist(int[][] directions, char[][] board, int r, int c, String word, int k) {
    if (k == word.length()) return true;
    if (r < 0 || c < 0 || r == board.length || c == board[0].length) return false;
    if (word.charAt(k) != board[r][c]) return false;
    board[r][c] = '#';
    for (int[] direction: directions) {
        if (exist(directions, board, r + direction[0], c + direction[1], word, k + 1)) return true;
    }
    board[r][c] = word.charAt(k);
    return false;
}
