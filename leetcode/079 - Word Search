/**
         * Given a 2D board and a word, find if the word exists in the grid.
        The word can be constructed from letters of sequentially adjacent cell, 
        where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
        For example, Given board =
        [
          ['A','B','C','E'],
          ['S','F','C','S'],
          ['A','D','E','E']
        ]
        word = "ABCCED", -> returns true,
        word = "SEE", -> returns true,
        word = "ABCB", -> returns false.
         **/
        public static bool WordSearch(char[,] board, string word)
        {
            Tuple<int, int>[] directions = new Tuple<int, int>[4];
            directions[0] = new Tuple<int, int>(0, -1);
            directions[1] = new Tuple<int, int>(-1, 0);
            directions[2] = new Tuple<int, int>(0, 1);
            directions[3] = new Tuple<int, int>(1, 0);

            for (int i = 0; i < board.GetLength(0); i++)
                for (int j = 0; j < board.GetLength(1); j++)
                {
                    if (board[i, j] == word[0])
                    {
                        if (DoWordSearch(board, word, 0, directions, i, j)) return true;
                    }
                }

            return false;
        }
        private static bool DoWordSearch(char[,] board, string word, int k, Tuple<int, int>[] directions, int r, int c)
        {
            if (r < 0 || c < 0 || r >= board.GetLength(0) || c >= board.GetLength(1)) return false;
            if (board[r, c] != word[k]) return false;
            if (k == word.Length - 1) return true;

            char temp = board[r, c];
            board[r, c] = '#';
            foreach (var direction in directions)
            {
                if (DoWordSearch(board, word, k + 1, directions, r + direction.Item1, c + direction.Item2)) return true;
            }
            board[r, c] = temp;

            return false;
        }
        
