/**
         * Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, 
         * then the whole array will be sorted in ascending order, too. 
        You need to find the shortest such subarray and output its length.

        Example 1:
        Input: [2, 6, 4, 8, 10, 9, 15]
        Output: 5
        Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.

        Note:
        Then length of the input array is in range [1, 10,000].
        The input array may contain duplicates, so ascending order here means <=.
         **/
        public static int ShortestUnsortedContinuousSubarray(int[] nums)
        {
            int n = nums.Length, start = -1, end = -1;
            int max = nums[0], min = nums[n - 1];
            for (int i = 1; i < n; ++i)
            {
                var j = n - 1 - i;
                max = Math.Max(max, nums[i]);
                min = Math.Min(min, nums[j]);
                if (max > nums[i]) end = i;
                if (min < nums[j]) start = j;
            }

            return end - start + 1;
        }
        
        [TestMethod]
        public void ShortestUnsortedContinuousSubarray()
        {
            var input = new int[] { 2, 6, 4, 8, 10, 9, 15 };
            Assert.AreEqual(5, ArrayAndString599.ShortestUnsortedContinuousSubarray(input));
        }
        
