Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it is able to trap after raining.
For example, Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.

public int trap(int[] heights) {
    if (heights == null || heights.length < 3) return 0;

    Stack<Integer> stack = new Stack<Integer>();
    int i = 0;
    int res = 0;
    while (i < heights.length) {
        if (stack.empty() || heights[i] <= heights[stack.peek()]) {
            stack.push(i++);
        } else {
            int bottom = heights[stack.pop()];
            while (!stack.empty() && heights[stack.peek()] == bottom) stack.pop();
            if (!stack.empty()) {
                int j = stack.peek();
                res += (Math.min(heights[j], heights[i]) - bottom) * (i - j - 1);
            }
        }
    }

    return res;
}

public int trap(int[] heights) {
    if (heights == null || heights.length < 3) return 0;

    int res = 0;
    int maxLeft = 0;
    int maxRight = 0;
    int i = 0;
    int j = heights.length - 1;
    while (i < j) {
        if (heights[i] < heights[j]) {
            if (maxLeft <= heights[i]) maxLeft = heights[i];
            else res += (maxLeft - heights[i]);
            i++;
        } else {
            if (maxRight <= heights[j]) maxRight = heights[j];
            else res += (maxRight - heights[j]);
            j--;
        }
    }

    return res;
}
