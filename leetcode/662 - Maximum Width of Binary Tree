Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. 
The binary tree has the same structure as a full binary tree, but some nodes are null.
The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, 
where the null nodes between the end-nodes are also counted into the length calculation.

Example 1:
Input: 
           1
         /   \
        3     2
       / \     \  
      5   3     9 
Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).

Example 2:
Input: 
          1
         /  
        3    
       / \       
      5   3     
Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).

Example 3:
Input: 
          1
         / \
        3   2 
       /        
      5      
Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).

Example 4:
Input: 
          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).

Note: Answer will in the range of 32-bit signed integer.

class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if (root == null) return 0;
        int res = 0;
        
        Queue<Tuple> current = new LinkedList<Tuple>();
        current.add(new Tuple(root, 1));
        while (current.size() > 0) {
            Queue<Tuple> next = new LinkedList<Tuple>();
            int start = 0;
            int end = 0;
            while (current.size() > 0) {
                Tuple t = current.remove();
                TreeNode node = t.node;
                end = t.idx;
                if (start == 0) start = end;
                if (node.left != null) next.add(new Tuple(node.left, end * 2 - 1));
                if (node.right != null) next.add(new Tuple(node.right, end * 2)); 
            }
            
            if (end > 0) {
                res = Math.max(res, end - start + 1);   
                current = next;
            }
        }
        
        return res;
    }
}

class Tuple {
    public TreeNode node;
    public int idx;
    public Tuple(TreeNode node, int idx) {
        this.node = node;
        this.idx = idx;
    }
}
