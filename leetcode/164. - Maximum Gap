class Solution {
    public int maximumGap(int[] nums) {
        if(nums == null || nums.length < 2) return 0;
 
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        for(int num : nums){
            max = Math.max(max, num);
            min = Math.min(min, num);
        }

        // initialize an array of buckets
        Bucket[] buckets = new Bucket[nums.length + 1]; //project to (0 - n)
        for(int i = 0; i < buckets.length; i++){
            buckets[i] = new Bucket();
        }

        double interval = (double) nums.length / (max - min);
        //distribute every number to a bucket array
        for(int num : nums){
            int index = (int) ((num - min) * interval);
            if (buckets[index].low == -1) {
                buckets[index].low = num;
                buckets[index].high = num;
            } else {
                buckets[index].low = Math.min(buckets[index].low, num);
                buckets[index].high = Math.max(buckets[index].high, num);
            }
        }

        //scan buckets to find maximum gap
        int result = 0;
        int prev = buckets[0].high;
        for(int i = 1; i < buckets.length; i++){
            if(buckets[i].low != -1){
                result = Math.max(result, buckets[i].low - prev);
                prev = buckets[i].high;
            }

        }

        return result;
    }
}

class Bucket{
    int low = -1;
    int high = -1;
}
