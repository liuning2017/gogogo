Design a HashMap without using any built-in hash table libraries.
To be specific, your design should include these functions:
put(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.
get(key): Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
remove(key) : Remove the mapping for the value key if this map contains the mapping for the key.

Example:
MyHashMap hashMap = new MyHashMap();
hashMap.put(1, 1);          
hashMap.put(2, 2);         
hashMap.get(1);            // returns 1
hashMap.get(3);            // returns -1 (not found)
hashMap.put(2, 1);          // update the existing value
hashMap.get(2);            // returns 1 
hashMap.remove(2);          // remove the mapping for 2
hashMap.get(2);            // returns -1 (not found) 

Note:
All keys and values will be in the range of [0, 1000000].
The number of operations will be in the range of [1, 10000].
Please do not use the built-in HashMap library.

class MyHashMap {

    private ListNode[] nodes;
    private static int len = 1024;
    
    /** Initialize your data structure here. */
    public MyHashMap() {
        nodes = new ListNode[len];
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        int idx = key % len;
        ListNode node = nodes[idx];
        
        if (node != null && node.key == key) {
            node.value = value;
            return;
        }
        
        while (node != null && node.next != null && node.next.key != key) {
            node = node.next;
        }
        
        if (node == null) {
            node = new ListNode();
            node.key = key;
            node.value = value;
            nodes[idx] = node;
        } else if (node.next == null) {
            node.next = new ListNode();
            node.next.key = key;
            node.next.value = value;
        } else {
            node.next.value = value;
        }
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        ListNode node = nodes[key % len];
        while (node != null && node.key != key) {
            node = node.next;
        }
        
        return node == null ? -1 : node.value;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int idx = key % len;
        ListNode node = nodes[idx];
        
        if (node != null && node.key == key) {
            nodes[idx] = node.next;
            return;
        }
        
        while (node != null && node.next != null && node.next.key != key) {
            node = node.next;
        }
        
        if (node != null && node.next != null) {
            node.next = node.next.next;
        }
    }
}

class ListNode {
    public int key;
    public int value;
    public ListNode next;
}
/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
