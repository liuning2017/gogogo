/**
         * Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
        For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
            1
           / \
          2   2
         / \ / \
        3  4 4  3
        But the following [1,2,2,null,3,null,3] is not:
            1
           / \
          2   2
           \   \
           3    3
         **/
        public static bool IsSymmetric(TreeNode root)
        {
            if (root == null) return true;
            return DoIsSymmetric(root.Left, root.Right);
        }

        private static bool DoIsSymmetric(TreeNode node1, TreeNode node2)
        {
            if (node1 == null && node2 == null) return true;
            if (node1 == null || node2 == null) return false;
            if (node1.Value != node2.Value) return false;
            return DoIsSymmetric(node1.Left, node2.Right) && DoIsSymmetric(node1.Right, node2.Left);
        }
        
