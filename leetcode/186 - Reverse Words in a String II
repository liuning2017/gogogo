Given an input string , reverse the string word by word. 
Example:
Input:  ["t","h","e"," ","s","k","y"," ","i","s"," ","b","l","u","e"]
Output: ["b","l","u","e"," ","i","s"," ","s","k","y"," ","t","h","e"]
Note: 
A word is defined as a sequence of non-space characters.
The input string does not contain leading or trailing spaces.
The words are always separated by a single space.
Follow up: Could you do it in-place without allocating extra space?

public void reverseWords(char[] str) {
    if (str == null || str.length < 3) return;
    reverse(str, 0, str.length - 1);

    int start = 0;
    for (int i = 1; i < str.length; i++) {
        if (str[i] == ' ') {
            reverse(str, start, i - 1);
            start = i + 1;
        }
    }
    reverse(str, start, str.length - 1);
}

private static void reverse(char[] str, int i, int j) {
    while (i < j) {
        char tmp = str[i];
        str[i] = str[j];
        str[j] = tmp;
        i++;
        j--;
    }
}
