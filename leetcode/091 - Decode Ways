A message containing letters from A-Z is being encoded to numbers using the following mapping:
'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:
Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).

Example 2:
Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

public int numDecodings(String s) {
    if (s == null || s.length() == 0) return 0;
    if (s.charAt(0) == '0') return 0;

    int n = s.length();
    int[] dp = new int[n + 1];
    dp[0] = 1;
    dp[1] = 1;
    for (int i = 2; i <= n; i++) {
        char c = s.charAt(i - 1);
        char cPrev = s.charAt(i - 2);
        if (c == '0') {
            if (cPrev == '1' || cPrev == '2') dp[i] = dp[i - 2];
            else return 0;
        } else if (c < '7') {
            if (cPrev == '1' || cPrev == '2') dp[i] = dp[i - 2] + dp[i - 1];
            else dp[i] = dp[i - 1];
        } else {
            if (cPrev == '1') dp[i] = dp[i - 2] + dp[i - 1];
            else dp[i] = dp[i - 1];
        }
    }

    return dp[n];
}
