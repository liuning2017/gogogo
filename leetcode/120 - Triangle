Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
Note: Please use only O(n) extra space, where n is the total number of rows in the triangle.

public int minimumTotal(List<List<Integer>> triangle) {
    if (triangle == null || triangle.size() == 0) return 0;

    int[] lastRow = new int[]{ triangle.get(0).get(0) };
    for (int i = 1; i < triangle.size(); i++) {
        List<Integer> list = triangle.get(i);
        int[] currentRow = new int[i + 1];
        for (int j = 0; j <= i; j++) {
            currentRow[j] = list.get(j) + getMin(lastRow, j);
        }
        lastRow = currentRow;
    }

    int res = Integer.MAX_VALUE;
    for (int i = 0; i < lastRow.length; i++)  res = Math.min(res, lastRow[i]);
    return res;
}

private int getMin(int[] lastRow, int j) {
    if (j == 0) return lastRow[j];
    if (j == lastRow.length) return lastRow[j - 1];
    return Math.min(lastRow[j - 1], lastRow[j]);
}
