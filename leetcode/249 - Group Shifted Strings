Given a string, we can "shift" each of its letter to its successive letter. 
For example: "abc" -> "bcd". We can keep "shifting" which forms the sequence: "abc" -> "bcd" -> ... -> "xyz"
Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.
Example:
Input: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"],
Output: 
[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]

public List<List<String>> groupStrings(String[] strs) {
      List<List<String>> res = new ArrayList<List<String>>();
      if (strs == null || strs.length == 0) return res;

      HashMap<String, List<String>> map = new HashMap<String, List<String>>();
      for (String str : strs) {
          String key = getKey(str);
          if (!map.containsKey(key)) map.put(key, new ArrayList<String>());
          map.get(key).add(str);
      }

      for (List<String> list : map.values()) res.add(list);
      return res;
  }

  private static String getKey(String str) {
      int offset = str.charAt(0) - 'a';
      StringBuilder sb = new StringBuilder();
      for (int i = 0; i < str.length(); i++) {
          char c = (char)(str.charAt(i) - offset);
          if (c < 'a') c += 26;
          sb.append(c);
      }

      return sb.toString();
  }
