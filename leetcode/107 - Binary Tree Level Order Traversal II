Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

public List<List<Integer>> levelOrderBottom(TreeNode root) {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    if (root == null) return res;

    Queue<TreeNode> current = new LinkedList<TreeNode>();
    current.add(root);
    while (current.size() > 0) {
        Queue<TreeNode> next = new LinkedList<TreeNode>();
        List<Integer> list = new ArrayList<Integer>();
        while (current.size() > 0) {
            TreeNode node = current.remove();
            list.add(node.val);
            if (node.left != null) next.add(node.left);
            if (node.right != null) next.add(node.right);
        }

        current = next;
        res.add(0, list);
    }

    return res;
}
