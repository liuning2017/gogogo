public List<List<String>> solveNQueens(int n) {
    List<List<String>> res = new ArrayList<List<String>>();
    boolean[][] board = new boolean[n][n];
    placeQueen(board, n, 0, res);
    return res;
}

private static void placeQueen(boolean[][] board, int n, int r, List<List<String>> res) {
    if (r == n) {
        res.add(generateSolution(board, n));
        return;    
    }

    for (int j = 0; j < n; j++) {
        if (canPlace(board, n, r, j)) {
            board[r][j] = true;
            placeQueen(board, n, r + 1, res);
            board[r][j] = false;
        }
    }
}

private static boolean canPlace(boolean[][] board, int n, int r, int c) {
    for (int i = 0; i < r; i++) {
        if (board[i][c]) return false;
        if (c - (r - i) >= 0 && board[i][c - (r - i)]) return false;
        if (c + (r - i) < n && board[i][c + (r - i)]) return false;
    }
    return true;
}

private static List<String> generateSolution(boolean[][] board, int n) {
    List<String> list = new ArrayList<String>();
    for (int i = 0; i < n; i++) {
        StringBuilder sb = new StringBuilder();
        for (int j = 0; j < n; j++) {
            if (board[i][j]) sb.append('Q');
            else sb.append('.');
        }
        list.add(sb.toString());
    }
    return list;
}

public int totalNQueens(int n) {
    int[] res = new int[1];
    boolean[][] board = new boolean[n][n];
    placeQueen(board, n, 0, res);
    return res[0];
}

private static void placeQueen(boolean[][] board, int n, int r, int[] res) {
    if (r == n) {
        res[0]++;
        return;    
    }

    for (int j = 0; j < n; j++) {
        if (canPlace(board, n, r, j)) {
            board[r][j] = true;
            placeQueen(board, n, r + 1, res);
            board[r][j] = false;
        }
    }
}
