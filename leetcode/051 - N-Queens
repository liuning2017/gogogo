public List<List<String>> solveNQueens(int n) {
    List<List<String>> res = new ArrayList<List<String>>();
    int[] cols = new int[n];
    place(cols, 0, res);
    return res;
}

private static void place(int[] cols, int r, List<List<String>> res) {
    if (r == cols.length) {
        addToResult(cols, res);
        return;
    }

    for (int j = 0; j < cols.length; j++) {
        if (isValid(cols, r, j)) {
            cols[r] = j;
            place(cols, r + 1, res);
        }
    }
}

private static boolean isValid(int[] cols, int r, int c) {
    for (int i = 0; i < r; i++) {
        if (cols[i] == c || cols[i] == c - r + i || cols[i] == c + r - i) return false;
    }
    return true;
}

private static void addToResult(int[] cols, List<List<String>> res) {
    List<String> list = new ArrayList<String>();
    for (int i = 0; i < cols.length; i++) {
        StringBuilder sb = new StringBuilder();
        for (int j = 0; j < cols.length; j++) {
            if (j != cols[i]) sb.append('.');
            else sb.append('Q');
        }
        list.add(sb.toString());
    }

    res.add(list);
}
