Implement an iterator to flatten a 2d vector. For example,
Given 2d vector =
[
  [1,2],
  [3],
  [4,5,6]
]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,2,3,4,5,6].

public class Vector2D implements Iterator<Integer> {
    List<List<Integer>> vec2d;
    int i = -1;
    int j = 0;
    List<Integer> current;
        
    public Vector2D(List<List<Integer>> vec2d) {
        this.vec2d = vec2d;
        if (vec2d != null || vec2d.size() > 0) {
            setCurrent();
        }
    }

    @Override
    public Integer next() {
        int val = current.get(j);
        j++;
        setCurrent();
        return val;
    }

    @Override
    public boolean hasNext() {
        return current != null && current.size() > 0;
    }
    
    private void setCurrent() {
        if (current != null && j < current.size()) return;
        j = 0;
        current = null;
        
        while (i < vec2d.size() - 1 && (current == null || current.size() == 0)) current = vec2d.get(++i);
    }
}

/**
 * Your Vector2D object will be instantiated and called as such:
 * Vector2D i = new Vector2D(vec2d);
 * while (i.hasNext()) v[f()] = i.next();
 */
