Implement an iterator to flatten a 2d vector. For example,
Given 2d vector =
[
  [1,2],
  [3],
  [4,5,6]
]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,2,3,4,5,6].

public class Vector2D implements Iterator<Integer> {
    Iterator<List<Integer>> itr1;
    Iterator<Integer> itr2;
        
    public Vector2D(List<List<Integer>> vec2d) {
        if (vec2d != null) {
            itr1 = vec2d.iterator();
            setCurrent();
        }
    }

    @Override
    public Integer next() {
        Integer val = itr2.next();
        setCurrent();
        return val;
    }

    @Override
    public boolean hasNext() {
        return itr2 != null && itr2.hasNext();
    }
    
    private void setCurrent() {
        while (itr2 == null || !itr2.hasNext()) {
            if (itr1.hasNext()) {
                List<Integer> list = itr1.next();
                if (list != null) itr2 = list.iterator();
            } else {
                break;
            }
        }
    }
}

/**
 * Your Vector2D object will be instantiated and called as such:
 * Vector2D i = new Vector2D(vec2d);
 * while (i.hasNext()) v[f()] = i.next();
 */
