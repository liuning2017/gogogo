Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note: The solution set must not contain duplicate quadruplets.
Example: Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.
A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

public List<List<Integer>> fourSum(int[] nums, int target) {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    if (nums == null || nums.length < 4) return res;

    Arrays.sort(nums);
    int n = nums.length;
    int i = 0;
    while (i <= n - 4) {
        int op1 = nums[i];
        int j = i + 1;
        while (j <= n - 3) {
            int op2 = nums[j];
            int t = target - op1 - op2;
            int k = j + 1;
            int l = n - 1;
            while (k < l) {
                int op3 = nums[k];
                int op4 = nums[l];
                int sum = op3 + op4;
                if (sum == t) {
                    res.add(Arrays.asList(op1, op2, op3, op4));
                    while (k < l && nums[k] == op3) k++;
                    while (k < l && nums[l] == op4) l--;
                } else if (sum < t) {
                    while (k < l && nums[k] == op3) k++;
                } else {
                    while (k < l && nums[l] == op4) l--;
                }
            }

            while (j <= n - 3 && nums[j] == op2) j++;
        }

        while (i <= n - 4 && nums[i] == op1) i++;
    }

    return res;
}
