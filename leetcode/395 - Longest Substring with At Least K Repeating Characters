Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.

Example 1:Input: s = "aaabb", k = 3, Output: 3
The longest substring is "aaa", as 'a' is repeated 3 times.

Example 2: Input: s = "ababbc", k = 2, Output: 5
The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.

public int longestSubstring(String s, int k) {
    if (s == null || s.length() < k) return 0;
    if (k < 2) return s.length();
    return findLongest(s, k, 0, s.length() - 1);
}

private static int findLongest(String s, int k, int start, int end) {
    if (end - start + 1 < k) return 0;

    int[] map = new int[26];
    for (int i = start; i <= end; i++) map[s.charAt(i) - 'a']++;

    HashSet<Character> separators = new HashSet<Character>();
    boolean flag = false;
    for (int i = 0; i < 26; i++) {
        if (map[i] > 0 && map[i] < k) separators.add((char)('a' + i));
        else if (map[i] >= k) flag = true;
    }

    if (separators.size() == 0) return end - start + 1;
    if (!flag) return 0;

    int res = 0;
    int j = start;
    while (j <= end) {
        while (j <= end && separators.contains(s.charAt(j))) j++;
        start = j;
        while (j <= end && !separators.contains(s.charAt(j))) j++;
        res = Math.max(res, findLongest(s, k, start, j - 1));
    }

    return res;
}
