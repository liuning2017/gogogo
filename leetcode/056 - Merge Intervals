Given a collection of intervals, merge all overlapping intervals.
For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if (intervals == null || intervals.size() == 0) return intervals;
        
        List<Interval> res = new ArrayList<Interval>();
        Collections.sort(intervals, new IntervalComparator());
        int currentStart = intervals.get(0).start;
        int currentEnd = intervals.get(0).end;
        for (Interval interval : intervals) {
            if (interval.start > currentEnd) {
                res.add(new Interval(currentStart, currentEnd));
                currentStart = interval.start;
                currentEnd = interval.end;
            } else if (interval.end > currentEnd) {
                currentEnd = interval.end;
            }
        }
        
        res.add(new Interval(currentStart, currentEnd));
        return res;
    }
    
}

class IntervalComparator implements Comparator<Interval> {
    public int compare(Interval interval1, Interval interval2) {
        return interval1.start - interval2.start;
    }
}
