A self-dividing number is a number that is divisible by every digit it contains.
For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
Also, a self-dividing number is not allowed to contain the digit zero.
Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.
Example 1:
Input: left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
Note: The boundaries of each input argument are 1 <= left <= right <= 10000.

public List<Integer> selfDividingNumbers(int left, int right) {
    List<Integer> res = new ArrayList<Integer>();
    for (int i = left; i <= Math.min(9, right); i++) {
        res.add(i);
    }
    if (right < 10) return res;

    left = Math.max(11, left);
    for (int i = left; i <= right; i++) {
        if (isSelfDivding(i)) res.add(i);
    }

    return res;
}

private boolean isSelfDivding(int n) {
    int m = n;
    while (m > 0) {
        int k = m % 10;
        if (k == 0) return false;
        if (n % k != 0) return false;
        m /= 10;
    }

    return true;
}
