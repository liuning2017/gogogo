Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
Note: A leaf is a node with no children.
Example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.

public int minDepth(TreeNode root) {
    if (root == null) return 0;

    int[] res = new int[1];
    res[0] = Integer.MAX_VALUE;
    findMinPath(root, 0, res);
    return res[0];
}

private void findMinPath(TreeNode node, int len, int[] res) {
    len++;
    if (len >= res[0]) return;
    if (node.left == null && node.right == null) {
        if (len < res[0]) res[0] = len;
        return;
    }

    if (node.left != null) findMinPath(node.left, len, res);
    if (node.right != null) findMinPath(node.right, len, res);
}
