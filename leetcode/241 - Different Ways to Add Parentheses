Given a string of numbers and operators, return all possible results from computing all the different possible ways 
to group numbers and operators. The valid operators are +, - and *.
Example 1
Input: "2-1-1".
((2-1)-1) = 0
(2-(1-1)) = 2
Output: [0, 2]

Example 2
Input: "2*3-4*5"
(2*(3-(4*5))) = -34
((2*3)-(4*5)) = -14
((2*(3-4))*5) = -10
(2*((3-4)*5)) = -10
(((2*3)-4)*5) = 10
Output: [-34, -14, -10, -10, 10]

public List<Integer> diffWaysToCompute(String input) {
    return recursiveCompute(input, 0, input.length() - 1);
}

private List<Integer> recursiveCompute(String s, int start, int end) {
    List<Integer> res = new ArrayList<Integer>();  

    for (int i = start; i <= end; i++) {
        char c = s.charAt(i);
        if (c == '+' || c == '-' || c == '*') {
            List<Integer> left = recursiveCompute(s, start, i - 1);
            List<Integer> right = recursiveCompute(s, i + 1, end);
            for (int j = 0; j < left.size(); j++)
                for (int k = 0; k < right.size(); k++) {
                    switch (c) {
                        case '+': res.add(left.get(j) + right.get(k)); break;
                        case '-': res.add(left.get(j) - right.get(k)); break;
                        case '*': res.add(left.get(j) * right.get(k)); break;
                    }
                }
        }
    }

    if (res.size() == 0) {
        res.add(Integer.valueOf(s.substring(start, end + 1)));
    }

    return res;
}
