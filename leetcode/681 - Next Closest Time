Given a time represented in the format "HH:MM", form the next closest time by reusing the current digits. 
There is no limit on how many times a digit can be reused.
You may assume the given input string is always valid. For example, "01:34", "12:09" are all valid. "1:34", "12:9" are all invalid.

Example 1:
Input: "19:34"
Output: "19:39"

Example 2:
Input: "23:59"
Output: "22:22"
Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22. 
It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.

public String nextClosestTime(String time) {
    HashSet<Integer> hs = new HashSet<Integer>();
    hs.add(Integer.valueOf(time.substring(0, 1)));
    hs.add(Integer.valueOf(time.substring(1, 2)));
    hs.add(Integer.valueOf(time.substring(3, 4)));
    hs.add(Integer.valueOf(time.substring(4, 5)));
    List<Integer> nums = new ArrayList<Integer>(hs);
    Collections.sort(nums);
    String min = String.valueOf(nums.get(0));
    int maxNum = nums.get(nums.size() - 1);

    int num = Integer.valueOf(time.substring(4, 5));
    if (num < maxNum) {
        for (int num1 : nums) {
            if (num1 > num) {
                return time.substring(0, 4) + String.valueOf(num1);
            }
        }
    }

    num = Integer.valueOf(time.substring(3, 4));
    if (num < maxNum) {
        for (int num1 : nums) {
            if (num1 > num && num1 < 6) {
                return time.substring(0, 3) + String.valueOf(num1) + min;
            }
        }
    }

    num = Integer.valueOf(time.substring(1, 2));
    if (num < maxNum) {
        for (int num1 : nums) {
            if (num1 > num && (time.charAt(0) < '2' || num1 < 4)) {
                return time.substring(0, 1) + String.valueOf(num1) + ":" + min + min;
            }
        }
    }


    num = Integer.valueOf(time.substring(0, 1));
    if (num < maxNum) {
       for (int num1 : nums) {
            if (num1 > num && num1 < 3) {
                return String.valueOf(num1) + min + ":" + min + min;
            }
        } 
    }

    return min + min + ":" + min  + min;
}
