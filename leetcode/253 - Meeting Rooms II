Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), 
find the minimum number of conference rooms required.
For example, Given [[0, 30],[5, 10],[15, 20]], return 2.

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public int minMeetingRooms(Interval[] intervals) {
    if (intervals == null || intervals.length == 0) return 0;

    TreeMap<Integer, Integer> hm = new TreeMap<Integer, Integer>();
    for (Interval interval : intervals) {
        if (!hm.containsKey(interval.start)) hm.put(interval.start, 0);
        hm.put(interval.start, hm.get(interval.start) + 1);

        if (!hm.containsKey(interval.end)) hm.put(interval.end, 0);
        hm.put(interval.end, hm.get(interval.end) - 1);
    }

    int maxRooms = 0;
    int total = 0;
    for (Map.Entry<Integer, Integer> entry : hm.entrySet()) {
        total += entry.getValue();
        maxRooms = Math.max(maxRooms, total);
    }

    return maxRooms;
}
