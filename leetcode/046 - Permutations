/**
         * Given a collection of distinct numbers, return all possible permutations.
        For example, [1,2,3] have the following permutations:
        [
          [1,2,3],
          [1,3,2],
          [2,1,3],
          [2,3,1],
          [3,1,2],
          [3,2,1]
        ]
         **/
        public static IList<IList<int>> Permutations(int[] nums)
        {
            IList<IList<int>> result = new List<IList<int>>();
            if (nums == null) return result;
            DoPermutations(nums.ToList(), new List<int>(), result);
            return result;
        }
        private static void DoPermutations(List<int> unused, List<int> set, IList<IList<int>> result)
        {
            if (unused.Count == 0)
            {
                result.Add(new List<int>(set));
                return;
            }

            int cnt = set.Count;
            for (int i = 0; i < unused.Count; i++)
            {
                var num = unused[i];
                set.Add(num);
                unused.RemoveAt(i);
                DoPermutations(unused, set, result);
                unused.Insert(i, num);
                set.RemoveAt(cnt);
            }
        }
        
