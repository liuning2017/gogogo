Given a collection of distinct numbers, return all possible permutations.
For example, [1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
 
public List<List<Integer>> permute(int[] nums) {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    doPermute(nums, new ArrayList<Integer>(), res);
    return res;
}

private static void doPermute(int[] nums, ArrayList<Integer> prefix, List<List<Integer>> res) {
    if (prefix.size() == nums.length) {
        res.add(new ArrayList(prefix));
        return;
    }

    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == Integer.MAX_VALUE) continue;
        int t = nums[i];
        prefix.add(t);
        nums[i] = Integer.MAX_VALUE;
        doPermute(nums, prefix, res);
        nums[i] = t;
        prefix.remove(prefix.size() - 1);
    }
}
