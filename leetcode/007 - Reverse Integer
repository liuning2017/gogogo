/**
         * Given a 32-bit signed integer, reverse digits of an integer.
        Example 1: Input: 123, Output:  321
        Example 2: Input: -123, Output: -321
        Example 3: Input: 120, Output: 21
        Note:
        Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. 
        For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
         **/
        public static int ReverseInteger(int x)
        {
            if (x == Int32.MinValue) return 0;

            int sign = x < 0 ? -1 : 1;
            x = Math.Abs(x);
            string s = x.ToString();

            int lastIndex = s.Length - 1;
            while (lastIndex >= 0 && s[lastIndex] == '0') lastIndex--;
            if (lastIndex < 0) return 0;

            long factor = 1;
            long result = 0;
            for (int i = 0; i <= lastIndex; i++)
            {
                result += (s[i] - '0') * factor;
                factor *= 10;
            }

            if (result > Int32.MaxValue) return 0;
            return Convert.ToInt32(result) * sign;
        }
        
