Design a Tic-tac-toe game that is played between two players on a n x n grid.
You may assume the following rules:
A move is guaranteed to be valid and is placed on an empty block.
Once a winning condition is reached, no more moves is allowed.
A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.

class TicTacToe {
    private int n;
    private int[] rows;
    private int[] cols;
    private int diag1 = 0;
    private int diag2 = 0;
    private int winner = 0;

    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        this.n = n;
        rows = new int[n];
        cols = new int[n];
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        if (winner > 0) return winner;
        int toAdd = player == 1 ? 1 : -1;
        
        rows[row] += toAdd;
        if (Math.abs(rows[row]) == n) {
            winner = player;
            return winner;
        }
        
        cols[col] += toAdd;
        if (Math.abs(cols[col]) == n) {
            winner = player;
            return winner;
        }
        
        if (row == col) {
            diag1 += toAdd;
            if (Math.abs(diag1) == n) {
                winner = player;
                return winner;
            }
        }
        
        if (row == n - 1 - col) {
            diag2 += toAdd;
            if (Math.abs(diag2) == n) {
                winner = player;
                return winner;
            }
        }
  
        return winner;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */
 
