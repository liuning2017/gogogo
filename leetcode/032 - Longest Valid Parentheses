Given a string containing just the characters '(' and ')', 
find the length of the longest valid (well-formed) parentheses substring.
For "(()", the longest valid parentheses substring is "()", which has length = 2.
Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

public int longestValidParentheses(String s) {
    if (s == null || s.length() < 2) return 0;

    int res = 0;
    int start = -1;
    Stack<Integer> stack = new Stack<Integer>();
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == '(') {
            stack.push(i);
            continue;
        }

        if (stack.empty()) {
            start = i;
            continue;
        }

        stack.pop();
        int idx = stack.empty() ? start : stack.peek();
        res = Math.max(res, i - idx);
    }

    return res;
}
