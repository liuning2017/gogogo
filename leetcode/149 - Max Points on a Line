Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.

/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
class Solution {
    public int maxPoints(Point[] points) {
        int res = 0;
        for (int i = 0; i < points.length; ++i) {
            int duplicate = 1;
            HashMap<Double, Integer> hm = new HashMap<Double, Integer>();
            for (int j = i + 1; j < points.length; ++j) {
                if (points[i].x == points[j].x && points[i].y == points[j].y) {
                    ++duplicate;
                } else if (points[i].x == points[j].x) {
                    hm.put(Double.MAX_VALUE, hm.getOrDefault(Double.MAX_VALUE, 0) + 1);
                } else if (points[i].y == points[j].y) {
                    hm.put(0.0, hm.getOrDefault(0.0, 0) + 1);
                } else {
                    double slope = (double)(points[j].y - points[i].y) / (double)(points[j].x - points[i].x);
                    hm.put(slope, hm.getOrDefault(slope, 0) + 1);
                }
            }
            res = Math.max(res, duplicate);
            for (Map.Entry<Double, Integer> e : hm.entrySet()) {
                res = Math.max(res, e.getValue() + duplicate);
            }
        }
        return res;
    }
}
