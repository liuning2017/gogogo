Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), 
determine if a person could attend all meetings.
For example, Given [[0, 30],[5, 10],[15, 20]], return false.

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
        if (intervals == null || intervals.length == 0) return true;
        
        Arrays.sort(intervals, new IntervalComparator());
        int lastEnd = intervals[0].end;
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i].start < lastEnd) return false;
            lastEnd = Math.max(lastEnd, intervals[i].end);
        }
        
        return true;
    }
}

class IntervalComparator implements Comparator<Interval> {
	@Override
	public int compare(Interval n1, Interval n2) {
		return n1.start - n2.start;
	}
}
