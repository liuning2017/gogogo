Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Example 1:
Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true

Example 2:
Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false

public boolean searchMatrix(int[][] matrix, int target) {
    if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return false;

    int m = matrix.length;
    int n = matrix[0].length;
    int r1 = 0;
    int r2 = m - 1;
    while (r1 <= r2) {
        int r = (r1 + r2) / 2;
        if (target < matrix[r][0]) {
            r2 = r - 1;
        } else if (target > matrix[r][n - 1]) {
            r1 = r + 1;
        } else {
            int c1 = 0;
            int c2 = n - 1;
            while (c1 <= c2) {
                int c = (c1 + c2) / 2;
                if (target == matrix[r][c]) return true;
                else if (target < matrix[r][c]) c2 = c - 1;
                else c1 = c + 1;
            }

            return false;
        }
    }

    return false;
}
