Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:

Players take turns placing characters into empty squares ' '.
The first player A always places 'X' characters, while the second player B always places 'O' characters.
'X' and 'O' characters are always placed into empty squares, never on filled ones.
The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return "Draw". If there are still movements to play return "Pending".

You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.

class Solution {
  public String tictactoe(int[][] moves) {
    char[][] grid = new char[3][3];
    for (int i = 0; i < moves.length; i++) {
      if (i % 2 == 0) {
        if (win(grid, moves[i], 'x')) return "A";
      } else {
        if (win(grid, moves[i], 'o')) return "B";
      }
    }
    
    return (moves.length == 9) ? "Draw" : "Pending";
  }
  
  private boolean win(char[][] grid, int[] move, char c) {
    grid[move[0]][move[1]] = c;
    
    int cnt = 0;
    for (int i = 0; i < 3; i++) {
      if (grid[i][move[1]] == c) cnt++; 
      else break;
    }
    if (cnt == 3) return true;
    
    cnt = 0;
    for (int j = 0; j < 3; j++) {
      if (grid[move[0]][j] == c) cnt++; 
      else break;
    }
    if (cnt == 3) return true;
    
    if (move[0] == move[1]) {
      cnt = 0;
      for (int i = 0; i < 3; i++) {
        if (grid[i][i] == c) cnt++; 
        else break;
      }
      if (cnt == 3) return true;
    }
    
    if (move[0] == 2 - move[1]) {
      cnt = 0;
      for (int i = 0; i < 3; i++) {
        if (grid[i][2 - i] == c) cnt++; 
        else break;
      }
      if (cnt == 3) return true;
    }
    
    return false;
  }
}
