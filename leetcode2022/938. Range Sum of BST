Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
  public int rangeSumBST(TreeNode root, int low, int high) {    
    int[] sum = new int[1];
    findNodes(root, low, high, sum);
    return sum[0];
  }
  
  private void findNodes(TreeNode node, int low, int high, int[] sum) {
    if (node == null) return;
    if (node.val >= low && node.val <= high) {
      sum[0] += node.val;
    }
    
    if (node.val > low) {
      findNodes(node.left, low, high, sum);
    } 
    if (node.val < high) {
      findNodes(node.right, low, high, sum);
    } 
  }
}
