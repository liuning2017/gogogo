You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.
There are two types of logs:
Letter-logs: All words (except the identifier) consist of lowercase English letters.
Digit-logs: All words (except the identifier) consist of digits.
Reorder these logs so that:

The letter-logs come before all digit-logs.
The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.
The digit-logs maintain their relative ordering.
Return the final order of the logs.

Example 1:
Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
Explanation:
The letter-log contents are all different, so their ordering is "art can", "art zero", "own kit dig".
The digit-logs have a relative order of "dig1 8 1 5 1", "dig2 3 6".

Example 2:
Input: logs = ["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act zoo"]
Output: ["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3 1","zo4 4 7"]

class Solution {
  public String[] reorderLogFiles(String[] logs) {
    if (logs == null || logs.length < 2) return logs;

    String[] result = new String[logs.length];
    List<String[]> letterLogs = new ArrayList();
    int j = logs.length;
    for (int i = logs.length - 1; i >= 0; i--) {
      String log = logs[i];
      int idx = log.indexOf(" ");
      String identifier = log.substring(0, idx);
      String content = log.substring(idx + 1);
      char firstChar = content.charAt(0);
      if (firstChar >= '0' && firstChar <= '9') {
        result[--j] = log;
      } else {
        insertToSorted(letterLogs, new String[] {log, identifier, content});
      }
    }
    
    j = 0;
    for (String[] arr : letterLogs) {
      result[j++] = arr[0];
    }

    return result;
  }
  
  private void insertToSorted(List<String[]> letterLogs, String[] arr) {    
    insertToSorted(letterLogs, 0, letterLogs.size() - 1, arr);
  }
  
  private void insertToSorted(List<String[]> letterLogs, int start, int end, String[] arr) {
    if (start > end) {
      letterLogs.add(start, arr);
      return;
    }
    
    int idx = (start + end) / 2;
    if (lessThan(arr, letterLogs.get(idx))) {
      insertToSorted(letterLogs, start, idx - 1, arr);
    } else {
      insertToSorted(letterLogs, idx + 1, end, arr);
    }
  }
  
  private boolean lessThan(String[] arr1, String[] arr2) {
    if (arr1[2].compareTo(arr2[2]) < 0) {
      return true;
    } else if (arr1[2].compareTo(arr2[2]) > 0) {
      return false;
    } else {
      return arr1[1].compareTo(arr2[1]) < 0;
    }
  }
}
