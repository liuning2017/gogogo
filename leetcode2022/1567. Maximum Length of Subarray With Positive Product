Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.
A subarray of an array is a consecutive sequence of zero or more values taken out of that array.
Return the maximum length of a subarray with positive product.

Example 1:
Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product of 24.

Example 2:
Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.
Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.

Example 3:
Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].
 
Constraints:
1 <= nums.length <= 105
-109 <= nums[i] <= 109

class Solution {
  public int getMaxLen(int[] nums) {
    int res = 0;
    int start = 0;
    int negs = 0;
    int leftNeg = -1;
    int rightNeg = -1;
    int i = 0;
    while (i < nums.length) {
      if (nums[i] == 0) {
        res = Math.max(res, getMaxLen(nums, start, i - 1, negs, leftNeg, rightNeg));
        negs = 0;
        start = i + 1;
        leftNeg = -1;
        rightNeg = -1;
      } else if (nums[i] < 0) {
        negs++;
        if (leftNeg == -1) leftNeg = i;
        rightNeg = i;
      }
      
      i++;
    }
    
    return Math.max(res, getMaxLen(nums, start, i - 1, negs, leftNeg, rightNeg));
  }
  
  private int getMaxLen(int[] nums, int start, int end, int negs, int leftNeg, int rightNeg) {
    int wholeLen = end - start + 1;
    if (negs % 2 == 0) return wholeLen;
    return wholeLen - Math.min(leftNeg - start + 1, end - rightNeg + 1);
  }
}
