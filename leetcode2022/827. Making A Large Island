You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.
Return the size of the largest island in grid after applying this operation.
An island is a 4-directionally connected group of 1s.

Example 1:
Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.

Example 2:
Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.

Example 3:
Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.
 
Constraints:
n == grid.length
n == grid[i].length
1 <= n <= 500
grid[i][j] is either 0 or 1.

class Solution {
  private int[][] directions = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
  
  public int largestIsland(int[][] grid) {
    List<Integer> area = new ArrayList();
    area.add(0);
    area.add(0);
    int groupId = 2;
    int res = 0;
    
    for (int i = 0; i < grid.length; i++)
      for (int j = 0; j < grid[0].length; j++) {
        if (grid[i][j] == 1) {
          area.add(0);
          markArea(grid, i, j, area, groupId);
          res = Math.max(res, area.get(groupId));
          groupId++;
        }
      }
    
    for (int i = 0; i < grid.length; i++)
      for (int j = 0; j < grid[0].length; j++) {
        if (grid[i][j] > 0) continue;
        
        Map<Integer, Integer> map = new HashMap();
        for (int[] direction : directions) {
          int i1 = i + direction[0];
          int j1 = j + direction[1];
          if (i1 < 0 || j1 < 0 || i1 >= grid.length || j1 >= grid[0].length) continue;
          
          groupId = grid[i1][j1];
          if (groupId > 0) map.put(groupId, area.get(groupId));
        }
        
        int connectArea = 1;
        for (int num : map.values()) connectArea += num;
        res = Math.max(res, connectArea);
      }
    
    return res;
  }
  
  private void markArea(int[][] grid, int i, int j, List<Integer> area, int groupId) {
    if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length) return;
    if (grid[i][j] != 1) return;
    
    grid[i][j] = groupId;
    area.set(groupId, area.get(groupId) + 1);
    for (int[] direction : directions) {
      markArea(grid, i + direction[0], j + direction[1], area, groupId);
    }
  }
}
