You are given an array of strings products and a string searchWord.
Design a system that suggests at most three product names from products after each character of searchWord is typed. Suggested products should have common prefix with searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.
Return a list of lists of the suggested products after each character of searchWord is typed.

Example 1:
Input: products = ["mobile","mouse","moneypot","monitor","mousepad"], searchWord = "mouse"
Output: [
["mobile","moneypot","monitor"],
["mobile","moneypot","monitor"],
["mouse","mousepad"],
["mouse","mousepad"],
["mouse","mousepad"]
]
Explanation: products sorted lexicographically = ["mobile","moneypot","monitor","mouse","mousepad"]
After typing m and mo all products match and we show user ["mobile","moneypot","monitor"]
After typing mou, mous and mouse the system suggests ["mouse","mousepad"]

Example 2:
Input: products = ["havana"], searchWord = "havana"
Output: [["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]]

Example 3:
Input: products = ["bags","baggage","banner","box","cloths"], searchWord = "bags"
Output: [["baggage","bags","banner"],["baggage","bags","banner"],["baggage","bags"],["bags"]]

class Solution {
  public List<List<String>> suggestedProducts(String[] products, String searchWord) {
    Trie root = new Trie("", false);
  
    for (String product : products) {
      Trie node = root;
      for (int i = 0; i < product.length(); i++) {
        node = node.addChild(product.charAt(i), i == product.length() - 1);
      }
    }
    
    List<List<String>> result = new ArrayList();
    Trie node = root;
    for (int i = 0; i < searchWord.length(); i++) {
      if (node == null) break;
      node = node.findChild(searchWord.charAt(i));
      List<String> list = new ArrayList();
      findWords(node, list);
      result.add(list);
    }
    
    while (result.size() < searchWord.length()) {
      result.add(new ArrayList());
    }
    
    return result;
  }
  
  private void findWords(Trie node, List<String> list) {
    if (list.size() == 3) return;
    if (node == null) return;
    if (node.isWord) list.add(node.val);
    for (Trie child : node.children.values()) {
      findWords(child, list);
    }
  }
}

class Trie {
  public String val;
  public boolean isWord;
  public Map<Character, Trie> children;
  
  public Trie(String value, boolean isWord) {
    this.val = value;
    this.isWord = isWord;
    this.children = new TreeMap();
  }
  
  public Trie findChild(char c) {
    return children.getOrDefault(c, null);
  }
  
  public Trie addChild(char c, boolean isWord) {
    if (children.containsKey(c)) {
      Trie child = children.get(c);
      child.isWord |= isWord;
      return child;
    } else {
      Trie child = new Trie(val + c, isWord);
      children.put(c, child);
      return child;
    }
  }
}
