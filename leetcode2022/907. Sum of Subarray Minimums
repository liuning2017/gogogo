Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

Example 1:
Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.

Example 2:
Input: arr = [11,81,94,43,3]
Output: 444

Constraints:
1 <= arr.length <= 3 * 104
1 <= arr[i] <= 3 * 104

class Solution {
  public int sumSubarrayMins(int[] arr) {
    long res = 0;
    Stack<Integer> s = new Stack<>();
    
    for (int i = 0; i <= arr.length; i++) {
      while (!s.isEmpty() && arr[s.peek()] > (i == arr.length ? Integer.MIN_VALUE : arr[i])) {
        int j = s.pop();
        int k = s.isEmpty() ? -1 : s.peek();
        res += (long)arr[j] * (i - j) * (j - k);
      }
      s.push(i);
    }
    
    return (int)(res % (Math.pow(10, 9) + 7));
  }
}
