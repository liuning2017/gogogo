Given a string s of '(' , ')' and lowercase English characters.
Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.
Formally, a parentheses string is valid if and only if:
It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 
Example 1:
Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

Example 2:
Input: s = "a)b(c)d"
Output: "ab(c)d"

Example 3:
Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.
 
Constraints:
1 <= s.length <= 105
s[i] is either'(' , ')', or lowercase English letter.

class Solution {
  public String minRemoveToMakeValid(String s) {
    Stack<Character> stack = new Stack();
    int left = 0;
    int right = 0;
    
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      if (c == '(') {
        left++;
        stack.push(c);
      } else if (c == ')') {
        if (right < left) {
          right++;
          stack.push(c);
        }
      } else {
        stack.push(c);
      }
    }
    
    left = 0;
    right = 0;
    StringBuilder sb = new StringBuilder();
    while (!stack.empty()) {
      char c = stack.pop();
      if (c == ')') {
        right++;
        sb.append(c);
      } else if (c == '(') {
        if (left < right) {
          left++;
          sb.append(c);
        }
      } else {
        sb.append(c);
      }
    }
    
    return sb.reverse().toString();
  }
}
