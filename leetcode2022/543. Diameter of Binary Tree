Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
  public int diameterOfBinaryTree(TreeNode root) {
    int[] res = new int[1];
    longestPath(root, res);
    return res[0];
  }
  
  private int longestPath(TreeNode node, int[] res) {
    if (node == null) return 0;
    int leftPath = node.left == null ? 0 : longestPath(node.left,  res) + 1;
    int rightPath = node.right == null ? 0 : longestPath(node.right, res) + 1;
    res[0] = Math.max(res[0], leftPath + rightPath);
    return Math.max(leftPath, rightPath);
  }
}
