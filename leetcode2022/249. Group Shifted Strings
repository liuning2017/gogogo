We can shift a string by shifting each of its letters to its successive letter.

For example, "abc" can be shifted to be "bcd".
We can keep shifting the string to form a sequence.

For example, we can keep shifting "abc" to form the sequence: "abc" -> "bcd" -> ... -> "xyz".
Given an array of strings strings, group all strings[i] that belong to the same shifting sequence. You may return the answer in any order.

Example 1:
Input: strings = ["abc","bcd","acef","xyz","az","ba","a","z"]
Output: [["acef"],["a","z"],["abc","bcd","xyz"],["az","ba"]]

Example 2:
Input: strings = ["a"]
Output: [["a"]]

Constraints:
1 <= strings.length <= 200
1 <= strings[i].length <= 50
strings[i] consists of lowercase English letters.

class Solution {
  public List<List<String>> groupStrings(String[] strings) {
    Map<String, List<String>> map = new HashMap();
    for (int i = 0; i < strings.length; i++) {
      String key = getKey(strings[i]);
      if (!map.containsKey(key)) map.put(key, new ArrayList());
      List<String> list = map.get(key);
      list.add(strings[i]);
    }
    
    return new ArrayList(map.values());
  }
  
  private String getKey(String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 1; i < s.length(); i++) {
      sb.append((26 + s.charAt(i) - s.charAt(i - 1)) % 26);
      sb.append(".");
    }
    return sb.toString();
  }
}
