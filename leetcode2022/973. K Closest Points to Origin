Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).

The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

class Solution {
  public int[][] kClosest(int[][] points, int k) {
    Queue<int[]> maxPQ = new PriorityQueue<>((a, b) -> b[0] - a[0]);
    for (int i = 0; i < points.length; i++) {
      int[] arr = new int[] {squaredDistance(points[i]), i};
      if (maxPQ.size() < k) {
        maxPQ.add(arr);
      } else if (arr[0] < maxPQ.peek()[0]) {
        maxPQ.poll();
        maxPQ.add(arr);
      }
    }
    
    int[][] result = new int[k][2];
    for (int i = 0; i < k; i++) {
      if (maxPQ.isEmpty()) break;
      result[i] = points[maxPQ.poll()[1]];
    }
    
    return result;
  }
  
  private int squaredDistance(int[] point) {
    return point[0] * point[0] + point[1] * point[1];
  }
}
